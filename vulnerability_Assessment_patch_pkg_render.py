#!/usr/bin/env python
"""vulnerability_Assessment_patch_pkg_render.py: This script will give you the package name list that needs to be updated for patching the server group.  The list is obtained by rendering the VA report provided by the infosec team by grouping the column "plugin_text" based on the node_type and then filter the package by removing the duplication."""
__author__      = "Vinoth Kumar Selvaraj"

import openpyxl
import os
import sys

print "\n\t\t\t=========IMPORTANT==========\n"
print "1)Add the column \"Hostname\" in the VA sheet to match the \"IP address\" column provided in the report. \n2) Delete a formula and keep only the value from the cells if any formula used, as this python script will read the cell on its value. \n Ref Link:- https://support.office.com/en-us/article/delete-or-remove-a-formula-193dbbed-6fcf-4f07-9119-5acff81b89c5"
print "\n\t\t\t===========================\n"

excel_document = openpyxl.load_workbook(raw_input("Enter the Excel Document name with full path: "))
print "The below sheets are availble in the excel document \n"
print excel_document.get_sheet_names()
VA = excel_document.get_sheet_by_name(raw_input("Enter the sheet name to load data from: "))
hostname_column = raw_input("Enter the Column name of hostname entries: ")
package_column = raw_input("Enter the Column name of Plugin_text entries: ")

def usage():
    print "vulnerability_Assessment_patch_pkg_render.py <node_type> where node_type is one or more of",
    print "'bmk', 'cadf', 'ceph', 'cfg', 'consul', 'cpu', 'ctl', 'des', 'dns', 'jmp', 'kvm', 'nal', 'ntp', 'ntw', 'prx', 'rmq', 'sql' or 'all'"

def file_creation(nodes):
 file1=open(str(nodes), "a+")
 for i in range(1, VA.max_row + 1):
    if nodes in VA[str(hostname_column)+str(i)].value:
        file1.write(VA[str(package_column)+str(i)].value +'\n' )
 file1.close()

def cmd_exe(nodes):
 cmd = 'grep \"Fixed package\" ' + str(nodes) + ' | awk -F\':\' \'{print $2}\' | sort | tr \'\"\' \' \' | cut -d\"_\" -f1 |uniq| grep -v linux-image | tr \"\n\" \" \" >>' + str(nodes) + '_filtered'
 os.system(cmd)

def generate_report(nodes):
 generate = '\n\n echo ' + str(nodes) + ' && cat ' + str(nodes) + '_filtered \n'
 print '\n'
 os.system(generate)

if __name__ == '__main__':
  if len(sys.argv) > 1:
      if sys.argv[1] == 'all':
         node_type = [ 'bmk', 'cadf', 'ceph', 'cfg', 'consul', 'cpu', 'ctl', 'des', 'dns', 'jmp', 'kvm', 'nal', 'ntp', 'ntw', 'prx', 'rmq', 'sql' ]
      else:
         node_type = sys.argv[1:]
      for nodes in node_type:
        file_creation(nodes)
        cmd_exe(nodes)
        generate_report(nodes)

  else:
   usage()
   sys.exit(1)
